Algorithm for Experiment 8: Calculator Using Lex and Yacc

1. Start the program.

2. In Lex file:
   a. Define token NUMBER for numeric values (digits 0–9).
   b. Define token ID for variable names (alphabets).
   c. Ignore whitespaces and tabs.
   d. Return newline (0) to indicate end of input.
   e. For any other character, return it as it is (operator or parenthesis).

3. In Yacc file:
   a. Declare tokens NUMBER and ID.
   b. Define operator precedence:

   * '+' and '-' have lower precedence.
   * '*' and '/' have higher precedence.
     c. Define grammar rules:
   * E → T { print result }
   * T → T '+' T | T '-' T | T '*' T | T '/' T | '-' T | '(' T ')' | NUMBER | ID

4. When the parser starts, it reads input tokens generated by Lex.

5. The grammar recursively evaluates expressions based on precedence and associativity.

6. For each arithmetic operation, perform the respective calculation using semantic actions:

   * `$$ = $1 + $3` for addition
   * `$$ = $1 - $3` for subtraction
   * `$$ = $1 * $3` for multiplication
   * `$$ = $1 / $3` for division

7. After parsing completes, display the computed result.

8. If any syntax error occurs, yyerror() is called and prints an invalid expression message.

9. End the program.


mcet@mcet-110-020IL:~/Desktop/s7 cs$ yacc -d calculator.y
mcet@mcet-110-020IL:~/Desktop/s7 cs$ flex calculator.l
mcet@mcet-110-020IL:~/Desktop/s7 cs$ cc lex.yy.c y.tab.c -ll
mcet@mcet-110-020IL:~/Desktop/s7 cs$ ./a.out
Enter the expression
(1+3)*5
Result = 20





%{
#include "y.tab.h"
#include <stdlib.h> // for atoi
extern int yylval;
%}

%%
[0-9]+ {
    yylval = atoi(yytext);
    return NUMBER;
}
[a-zA-Z]+ {
    return ID;
}
[ \t]+ ;   // Skip whitespaces
\n    { return 0; }
.     { return yytext[0]; }
%%

