ALGORITHMS

EXPERIMENT 1: Lexical Analyser Using C Language

Aim: Design and Implement a lexical Analyser Using C Language to recogonise all valid tokens in the input program.
The lexical analyser should ignore redundant spaces, tabs and newlines. it should also ignore comments

Algorithm:
    1. start
    2. open the input file "input.txt" in read mode
    3. if the file is not found. Display an error message
    4. else scan and analyse each component ch until the end of file:
        - if ch is a keyword display "KEYWORD"
        - if ch is an identifier display "IDENTIFIER"
        - if ch is any arithmetic operator display "OPERATOR"
    5. close the file
    6. stop

EXPERIMENT 2: Lexical Analyser Using Lex Tool

Aim: Implement a lexical analyser for a given program using Lex Tool

Algorithm:
    1. start
    2. open the file "input.c" in read mode
    3. if the file is not found. Display an error message
    4. Else scan and analyse each component ch until the end of file:
        - if ch is a keyword display "KEYWORD"
        - if ch is an identifier display "IDENTIFIER"
        - if ch is any arithmetic operator display "OPERATOR"
    5. close the file
    6. stop

EXPERIMENT 3:

EXPERIMENT 4:

EXPERIMENT 5:

EXPERIMENT 6: Valid Arithmetic Expression

Aim: Generate a YACC specification to recogonise a valid arithmetic expression that uses operators
+ - * / and paranthesis

Algorithm:
    1. Start
    2. Read the expression
    3. Check the expression using the YACC rule to validate it
    4. Using expression rule print the result of the given expression
    5. stop

EXPERIMENT 7: Valid Identifier

Aim: Generate a YACC specification to recogonise and valid identifier which starts with a
letter followed by any number of letters or digits

Algorithm:
    1. start
    2. read a string
    3. if string starts with a letter and rest of the characters are letters or digits,
    print " valid identifier "
    4. else print "invalid identifier"
    5. stop

EXPERIMENT 8: Calculator Using Lex & YACC

Aim: Implementation of calculator using LEX and YACC

Algorithm:
    1. start
    2. created a lex file with the rules to create tokens
        a. contains include statements for standard input and output
        b. contains yywrap() function which return 1 at the end of the input
    3. created a YACC file containing declarations, rule sections and routines
        a. defined the global variables and the tokens used by the parser
        b. defines the rule that parse the input stream
        c. contains sub routines
    4. main function to call the yyparse() function
    5. call the sub routines yyerror to find the syntax error if any
    6. stop

EXPERIMENT 9:

EXPERIMENT 10:

EXPERIMENT 11: Shift Reduce parser

Aim: Construct a shift reduce parser for a given Language

Algorithm:
    1. Start
    2. Get the input expression and store it in input buffer
    3. Read the data from the input buffer one at a time
    4. using stack and push & pop operation shift and reduce symbols
    with respect to production rules available
    5. continue the process till symbols shift and production rule reduce
    reaches the start symbols
    6. display the stack Implementation table with corresponding stack actions
    with input symbols
    7. stop

EXPERIMENT 12:

EXPERIMENT 13:

EXPERIMENT 14:
